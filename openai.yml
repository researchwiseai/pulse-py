openapi: 3.1.0
info:
    title: Pulse API
    version: 0.4.0
    description: |
        A stateless RESTful service that provides **five** core capabilities:

          • Batch generation of dense vector embeddings for up to 200 input strings.
          • Flexible cosine-similarity computations across strings.
          • Thematic clustering of open-ended text into concise, human-readable themes.
          • Sentiment classification of each input string.
          • Extraction of text elements matching specified themes from input strings.

        ### Similarity

        The similarity endpoint supports two scenarios:

          1. **Self-similarity** - Provide a single set of strings (`set`) and the
             service **always** returns a **flattened** upper-triangle similarity
             vector (excluding the diagonal). The response also includes the number
             of input strings (`n`) so the caller can easily re-shape the full matrix.

          2. **Cross-similarity** - Provide two distinct sets (`set_a` and `set_b`)
             and the service returns similarities only between items across the two
             sets (|A| x |B| matrix). The representation can be `matrix` (default)
             or flattened when the `flatten=true` query parameter is supplied.

        ### Themes

        The themes endpoint groups a collection of open-ended responses (e.g., survey
        comments, product reviews) into **latent themes**. Each theme now contains:

          • `shortLabel` - a concise (2-4 word) name for dashboards or charts.
          • `label` - a slightly longer descriptive title.
          • `description` - 1-2 sentences summarising the common idea captured by the theme.
          • `representatives` - exactly two representative input strings for each theme.

        Callers may optionally specify `minThemes`, `maxThemes`, and a free-text
        `context` string to steer clustering (e.g., "focus on UX issues").

        ### Sentiment

        The sentiment endpoint classifies each input string as **positive**, **negative**,
        **neutral**, or **mixed** and returns a confidence value ∈ [0, 1].

        ### Versioning

        The service maintains internally versioned models. When the optional `version`
        field is omitted, the latest production version is used. Supplying a `version`
        locks behaviour to that specific model version, enabling reproducible results
        even after future upgrades.

servers:
    - url: https://dev.core.researchwiseai.com/pulse/v1
      description: Dev server

paths:
    /embeddings:
        post:
            operationId: createEmbeddings
            summary: Generate dense vector embeddings for up to 200 input strings.
            description: |
                Generates dense vector embeddings for up to 200 input strings in a single batch.
                Each embedding encodes semantic information for downstream tasks such as similarity search or clustering.
            tags: [embeddings]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EmbeddingsRequest'
                        examples:
                            Default:
                                summary: Sample embeddings request
                                value:
                                    inputs: ["Hello world", "Test input"]
            responses:
                '200':
                    description: Embeddings successfully created.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/EmbeddingsResponse'
                            examples:
                                EmbeddingsResponseExample:
                                    summary: Sample successful response
                                    value:
                                        embeddings:
                                            - text: "Hello world"
                                              vector: [0.1, 0.2, 0.3]
                                            - text: "Test input"
                                              vector: [0.4, 0.5, 0.6]
                                        requestId: "example-request-id"
                '400':
                    description: Bad request - validation error (e.g., >200 strings).

    /similarity:
        post:
            operationId: compareSimilarity
            summary: Compute cosine similarity between strings (self or cross).
            description: |
                Computes pairwise cosine similarity between input strings.
                For **self-similarity**, provide a single `set` of strings to receive a flattened
                upper-triangle similarity vector. For **cross-similarity**, provide `set_a`
                and `set_b` to receive the full similarity matrix or a flattened array when
                `flatten=true`.
            tags: [similarity]
            parameters:
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                  description: |
                      For **cross-similarity** responses, when true the |A| x |B| matrix is
                      flattened into a 1-D array. Ignored for the self-similarity scenario,
                      which is always flattened.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SimilarityRequest'
                        examples:
                            SelfExample:
                                summary: Self-similarity request
                                value:
                                    set: ["alpha", "beta", "gamma"]
                            CrossExample:
                                summary: Cross-similarity request
                                value:
                                    set_a: ["apple", "banana"]
                                    set_b: ["orange", "pear"]
                                    version: "v1"
            responses:
                '200':
                    description: Similarity values returned successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SimilarityResponse'
                            examples:
                                SimilarityMatrixExample:
                                    summary: Cross-similarity matrix response
                                    value:
                                        scenario: "cross"
                                        mode: "matrix"
                                        matrix: [[1.0, 0.8], [0.8, 1.0]]
                                        flattened: [1.0, 0.8, 0.8, 1.0]
                                        requestId: "example-request-id"
                '400':
                    description: Bad request - validation error (e.g., invalid input).

    /themes:
        post:
            operationId: generateThemes
            summary: Cluster open-ended text responses into thematic groups.
            description: |
                Groups input strings into latent themes using LLM-based clustering.
                Each theme includes a `shortLabel`, `label`, `description`, and exactly
                two representative input strings. Optionally control theme count with
                `minThemes`, `maxThemes`, and provide a free-text `context` to steer focus.
            tags: [themes]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ThemesRequest'
                        examples:
                            Default:
                                summary: Basic themes request
                                value:
                                    inputs: ["fast service", "slow response", "easy setup"]
                            WithOptions:
                                summary: Themes request with options
                                value:
                                    inputs: ["app crashes on launch", "error message shown"]
                                    minThemes: 2
                                    maxThemes: 5
                                    context: "focus on reliability issues"
                                    version: "v1"
            responses:
                '200':
                    description: Thematic clustering completed successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ThemesResponse'
                            examples:
                                ThemesResponseExample:
                                    summary: Sample themes response
                                    value:
                                        themes:
                                            - shortLabel: "UI Issue"
                                              label: "User Interface Issues"
                                              description: "Problems related to layout and design."
                                              representatives:
                                                - "Button not aligned"
                                                - "Text too small"
                                        requestId: "example-request-id"
                '400':
                    description: Bad request - validation error (e.g., inputs >200 strings).

    /sentiment:
        post:
            operationId: analyzeSentiment
            summary: Classify sentiment of each input string.
            description: |
                Analyzes the sentiment of each input string, categorizing as
                **positive**, **negative**, **neutral**, or **mixed**, with confidence
                scores ∈ [0, 1]. Optionally supply `version` for reproducible outputs.
            tags: [sentiment]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SentimentRequest'
                        examples:
                            Default:
                                summary: Basic sentiment request
                                value:
                                    input: ["I love this", "I hate that"]
                            WithVersion:
                                summary: Sentiment request with version
                                value:
                                    input: ["It was okay"]
                                    version: "v1"
            responses:
                '200':
                    description: Sentiment analysis results.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SentimentResponse'
                            examples:
                                SentimentResponseExample:
                                    summary: Sample sentiment response
                                    value:
                                        results:
                                          - sentiment: "positive"
                                            confidence: 0.95
                                          - sentiment: "negative"
                                            confidence: 0.85
                                        requestId: "example-request-id"
                '400':
                    description: Bad request - validation error.

    /extractions:
        post:
            operationId: extractElements
            summary: Extract elements matching themes from input strings.
            description: |
                Extracts all substrings from each input that match the provided themes.
                Returns a 3-dimensional array where `extractions[i][j]` contains the list
                of matching elements for input `i` and theme `j`.
            tags: [extractions]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExtractionsRequest'
                        examples:
                            Default:
                                summary: Basic extractions request
                                value:
                                    inputs: ["The food was great and the service was slow."]
                                    themes: ["food", "service"]
            responses:
                '200':
                    description: Extraction results returned successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExtractionsResponse'
                            examples:
                                ExtractionsResponseExample:
                                    summary: Sample extractions response
                                    value:
                                        extractions:
                                          - - ["food was great"]
                                            - ["service was slow"]
                                        requestId: "example-request-id"
                '400':
                    description: Bad request - validation error.

    /jobs:
        get:
            operationId: getJobStatus
            summary: Retrieve status of an asynchronous job.
            description: |
                Retrieves the status of a previously submitted long-running job.
                Returns `pending`, `completed`, or `failed`. When `completed`, includes
                a `resultUrl` to download results.
            tags: [jobs]
            parameters:
                - in: query
                  name: jobId
                  required: true
                  schema:
                      type: string
                  description: Unique identifier for the job.
            responses:
                '200':
                    description: Job status returned successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JobStatusResponse'
                '400':
                    description: Missing or invalid jobId query parameter.
                '404':
                    description: Job not found.

components:
    securitySchemes:
        ApiKeyAuth:
            type: apiKey
            in: header
            name: X-API-Key

    schemas:
        EmbeddingsRequest:
            type: object
            properties:
                inputs:
                    type: array
                    maxItems: 200
                    items:
                        type: string
            required: [inputs]
            additionalProperties: false

        EmbeddingDocument:
            type: object
            properties:
                id:
                    type: string
                text:
                    type: string
                vector:
                    type: array
                    items:
                        type: number
                        format: float
            required: [text, vector]
            additionalProperties: false

        EmbeddingsResponse:
            type: object
            properties:
                embeddings:
                    type: array
                    items:
                        $ref: '#/components/schemas/EmbeddingDocument'
                requestId:
                    type: string
            required: [embeddings, requestId]
            additionalProperties: false

        SimilarityRequest:
            type: object
            properties:
                set:
                    type: array
                    minItems: 2
                    maxItems: 200
                    items:
                        type: string
                set_a:
                    type: array
                    minItems: 1
                    maxItems: 200
                    items:
                        type: string
                set_b:
                    type: array
                    minItems: 1
                    maxItems: 200
                    items:
                        type: string
                version:
                    type: string
            oneOf:
                - required: [set]
                - required: [set_a, set_b]
            additionalProperties: false

        SimilarityResponse:
            type: object
            properties:
                scenario:
                    type: string
                    enum: [self, cross]
                mode:
                    type: string
                    enum: [matrix, flattened]
                n:
                    type: integer
                flattened:
                    type: array
                    items:
                        type: number
                        format: float
                matrix:
                    type: array
                    items:
                        type: array
                        items:
                            type: number
                            format: float
                requestId:
                    type: string
            required: [scenario, mode, n, flattened, requestId]
            additionalProperties: false

        ThemesRequest:
            type: object
            properties:
                inputs:
                    type: array
                    minItems: 2
                    maxItems: 200
                    items:
                        type: string
                minThemes:
                    type: integer
                    minimum: 1
                maxThemes:
                    type: integer
                    maximum: 50
                context:
                    type: string
                version:
                    type: string
            required: [inputs]
            additionalProperties: false

        Theme:
            type: object
            properties:
                shortLabel:
                    type: string
                label:
                    type: string
                description:
                    type: string
                representatives:
                    type: array
                    description: Two representative input strings for the theme.
                    minItems: 2
                    maxItems: 2
                    items:
                        type: string
            required: [shortLabel, label, description, representatives]
            additionalProperties: false

        ThemesResponse:
            type: object
            properties:
                themes:
                    type: array
                    items:
                        $ref: '#/components/schemas/Theme'
                requestId:
                    type: string
            required: [themes, requestId]
            additionalProperties: false

        SentimentRequest:
            type: object
            properties:
                input:
                    type: array
                    minItems: 1
                    maxItems: 200
                    items:
                        type: string
                version:
                    type: string
            required: [input]
            additionalProperties: false

        SentimentResult:
            type: object
            properties:
                sentiment:
                    type: string
                    enum: [positive, negative, neutral, mixed]
                confidence:
                    type: number
                    minimum: 0
                    maximum: 1
            required: [sentiment, confidence]
            additionalProperties: false

        SentimentResponse:
            type: object
            properties:
                results:
                    type: array
                    items:
                        $ref: '#/components/schemas/SentimentResult'
                requestId:
                    type: string
            required: [results, requestId]
            additionalProperties: false

        ExtractionsRequest:
            type: object
            properties:
                inputs:
                    type: array
                    minItems: 1
                    maxItems: 200
                    items:
                        type: string
                themes:
                    type: array
                    minItems: 1
                    maxItems: 50
                    items:
                        type: string
                version:
                    type: string
            required: [inputs, themes]
            additionalProperties: false

        ExtractionsResponse:
            type: object
            properties:
                extractions:
                    type: array
                    description: 3D array of extracted elements, shape [inputs.length][themes.length][K]
                    items:
                        type: array
                        items:
                            type: array
                            items:
                                type: string
                requestId:
                    type: string
            required: [extractions, requestId]
            additionalProperties: false

        JobStatusResponse:
            type: object
            properties:
                jobId:
                    type: string
                status:
                    type: string
                    enum: [pending, completed, failed]
                resultUrl:
                    type: string
            required: [status]
            additionalProperties: false
